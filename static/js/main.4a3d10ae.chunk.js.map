{"version":3,"sources":["component/Weather.jsx","component/Form.jsx","component/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","location","desc","icon","temp","min","tempMin","max","tempMax","wind","Form","error","role","onSubmit","loadWeather","list","type","placeholder","name","autoComplete","id","value","Navbar","App","getWeather","event","a","preventDefault","city","target","elements","country","fetch","apiCall","json","response","console","log","setState","sys","calcFahrenheit","main","temp_max","temp_min","speed","weather","description","getWeatherIcon","weatherIcon","state","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4a3d10ae.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/weather.css';\nimport '../index.css';\n\nfunction Weather(props) {\n  return (\n    <div className=\"container text-light\">\n      <div className=\"cards pt-4\">\n        <h1>{props.location}</h1>\n        <h4 className=\"\">{props.desc}</h4>\n        <h5 className=\"py-4\">\n          <i className={`wi ${props.icon} display-1`}></i>\n        </h5>\n        {props.temp ? <h1 className=\"py-2\">{props.temp}&deg;</h1> : null}\n        {minmaxTemp(props.tempMin, props.tempMax)}\n        {props.wind ? <h4 className='py-2'>wind: {props.wind}</h4> : null}\n        \n      </div>\n    </div>\n  );\n}\n\nfunction minmaxTemp(min, max) {\n  if (min && max) {\n    return (\n      <h3>\n        <span className=\"px-4\">{min}&deg;</span>\n        <span className=\"px-4\">{max}&deg;</span>\n      </h3>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default Weather;\n","import React from 'react';\nimport '../styles/form.css';\n\nfunction Form(props) {\n  // const data = \n  return (\n    <div className=\"container\">\n      <div>{props.error ? error() : null}</div>\n      <form onSubmit={props.loadWeather}>\n        <div className=\"row\">\n          <div className=\"col-md-3 offset-md-2\">\n            <input\n              list=\"cityNames\"\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"City...\"\n              name=\"city\"\n              autoComplete=\"off\"\n            />\n            <datalist id=\"cityNames\">\n              {' '}\n              <option value='home'/>\n            </datalist>\n          </div>\n          <div className=\"col-md-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Country(US)...\"\n              name=\"country\"\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"col-md-3 mt-2 mt-md-0\">\n            <button className=\"btn btn-outline-light\">Get Weather</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nfunction error() {\n  return (\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\n      Please Enter City and Country.\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react'\n\n\nfunction Navbar() {\n  return (\n    <div>\n      <h1 className=\"pt-4 text-light\">Your Weather</h1>\n    </div>\n  )\n}\n\nexport default Navbar\n","import React from 'react';\nimport './App.css';\nimport Weather from './component/Weather.jsx';\nimport Form from './component/Form.jsx';\nimport Navbar from './component/Navbar.jsx';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nconst apiKey = '87ef27d93fbc8f922380ae25b08fa55b';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      icon: undefined,\n      main: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      wind: undefined,\n      desc: '',\n      error: false,\n    };\n    //using weather icons with weather-icons.css\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog',\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calcFahrenheit(temp) {\n    const cell = Math.floor((temp - 273.15) * (9 / 5) + 32);\n    return cell;\n  }\n\n  getWeather = async event => {\n    // to overide page from loading when called\n    event.preventDefault();\n\n    // calling name var in input doc to retrieve value\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    if (city && country) {\n      const apiCall = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`\n      );\n      const response = await apiCall.json();\n      console.log(response);\n      this.setState({\n        location: `${response.name}, ${response.sys.country}`,\n        temp: this.calcFahrenheit(response.main.temp),\n        tempMax: this.calcFahrenheit(response.main.temp_max),\n        tempMin: this.calcFahrenheit(response.main.temp_min),\n        wind: response.wind.speed,\n        desc: response.weather[0].description,\n        error: false\n      });\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\n        <Weather\n          location={this.state.location}\n          temp={this.state.temp}\n          tempMax={this.state.tempMax}\n          tempMin={this.state.tempMin}\n          wind={this.state.wind}\n          desc={this.state.desc}\n          icon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}